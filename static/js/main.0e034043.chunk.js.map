{"version":3,"sources":["redux/news/types.js","components/NewsList/NewsList.jsx","redux/geoLocation/types.js","components/Weather/Weather.jsx","redux/geoLocation/actions.js","App.js","redux/news/actions.js","serviceWorker.js","redux/news/reducer.js","redux/geoLocation/reducer.js","root-reducer.js","store.js","index.js"],"names":["newsTypes","connect","newsList","newsListData","pending","className","data","articles","map","article","key","url","href","target","rel","title","source","name","geoLocationTypes","geoLocation","location","weather","locationPending","locationCoordinates","weatherData","weatherPending","isPending","dispatch","getGeoLocation","type","navigator","geolocation","getCurrentPosition","position","console","log","coords","payload","latitude","longitude","getWeatherReport","Axios","get","then","response","catch","error","useState","currentTemperature","weatherDetail","setWeatherDetail","useEffect","undefined","main","temp","toFixed","src","icon","alt","requestNews","country","sys","Boolean","window","hostname","match","INITIAL_STATE","INITIAL_STATE_WEATHER","rootReducer","combineReducers","state","action","middlewares","thunk","createLogger","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0e034043.chunk.js","sourcesContent":["export const newsTypes = {\n  FETCH_NEWS_SUCCESS: \"FETCH_NEWS_SUCCESS\",\n  FETCH_NEWS_PENDING: \"FETCH_NEWS_PENDING\",\n  FETCH_NEWS_FAILED: \"FETCH_NEWS_FAILED\",\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./NewsList.scss\";\n\nconst NewsList = ({ newsListData, pending }) => {\n  return (\n    <div className=\"news-container\">\n      {!pending && newsListData\n        ? newsListData.data.articles.map((article) => {\n            return (\n              <div className=\"newslist\" key={article.url}>\n                <a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <h2>{article.title}</h2>\n                </a>\n                <p>{article.source.name}</p>\n              </div>\n            );\n          })\n        : null}\n    </div>\n  );\n};\nconst mapStateToProps = ({ newsList: { newsListData, pending } }) => ({\n  newsListData,\n  pending,\n});\nexport default connect(mapStateToProps)(NewsList);\n","export const geoLocationTypes = {\n  GET_GEO_LOCATION_SUCCESS: \"GET_GEO_LOCATION_SUCCESS\",\n  GET_GEO_LOCATION_FAILED: \"GET_GEO_LOCATION_FAILED\",\n  GET_GEO_LOCATION_PENDING: \"GET_GEO_LOCATION_PENDING\",\n  FETCH_WEATHER_PENDING: \"FETCH_WEATHER_PENDING\",\n  FETCH_WEATHER_SUCCESS: \"FETCH_WEATHER_SUCCESS\",\n  FETCH_WEATHER_FAILED: \"FETCH_WEATHER_FAILED\",\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  getGeoLocation,\n  getWeatherReport,\n} from \"../../redux/geoLocation/actions\";\nimport \"./Weather.scss\";\nconst Weather = ({\n  locationCoordinates,\n  locationPending,\n  getGeoLocation,\n  getWeatherReport,\n  weatherData,\n  weatherPending,\n}) => {\n  const [weatherDetail, setWeatherDetail] = useState({\n    currentTemperature: null,\n  });\n  useEffect(() => {\n    getGeoLocation();\n  }, [getGeoLocation]);\n\n  useEffect(() => {\n    if (!locationPending && locationCoordinates !== undefined) {\n      console.log(\"getWeatherReport\", locationCoordinates.latitude);\n      getWeatherReport(locationCoordinates);\n    }\n  }, [locationPending, locationCoordinates]);\n  useEffect(() => {\n    if (!weatherPending && weatherData !== null) {\n      setWeatherDetail({\n        ...weatherDetail,\n        currentTemperature: (weatherData.data.main.temp - 273).toFixed(1),\n      });\n    }\n  }, [weatherPending, weatherData]);\n  return (\n    <div>\n      {locationPending ? (\n        <h2>Asking for geoLocation</h2>\n      ) : (\n        <div>\n          {!weatherPending && weatherData !== null ? (\n            <div className=\"weather-container effect3\">\n              <div>\n                <h4>{weatherData.data.name}</h4>\n                <h2>{weatherDetail.currentTemperature + \" \"}&#8451;</h2>\n              </div>\n              <div>\n                <img\n                  src={`http://openweathermap.org/img/wn/${weatherData.data.weather[0].icon}@2x.png`}\n                  alt=\"weather-icon\"\n                />\n              </div>\n            </div>\n          ) : (\n            <h4>fetching weather ...</h4>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  geoLocation: { pending, location },\n  weather: { data, isPending },\n}) => ({\n  locationPending: pending,\n  locationCoordinates: location,\n  weatherData: data,\n  weatherPending: isPending,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getGeoLocation: () => dispatch(getGeoLocation()),\n  getWeatherReport: (data) => dispatch(getWeatherReport(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\n","import { geoLocationTypes } from \"./types\";\nimport Axios from \"axios\";\nexport function getGeoLocation() {\n  /* if (\"geolocation\" in navigator) {\n    let coordinates = {};\n    navigator.geolocation.getCurrentPosition(function (position) {\n      coordinates[\"latitude\"] = position.coords.latitude;\n      coordinates[\"longitude\"] = position.coords.longitude;\n    });\n\n    return {\n      type: geoLocationTypes.GET_GEO_LOCATION_SUCCESS,\n      payload: coordinates,\n    };\n  } else {\n    return {\n      type: geoLocationTypes.GET_GEO_LOCATION_FAILED,\n    };\n  } */\n  return (dispatch) => {\n    dispatch({\n      type: geoLocationTypes.GET_GEO_LOCATION_PENDING,\n    });\n    const geolocation = navigator.geolocation;\n    geolocation.getCurrentPosition((position) => {\n      console.log(position.coords);\n      dispatch({\n        type: geoLocationTypes.GET_GEO_LOCATION_SUCCESS,\n        payload: {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        },\n      });\n    });\n    if (!navigator.geolocation) {\n      dispatch({\n        type: geoLocationTypes.GET_GEO_LOCATION_FAILED,\n      });\n    }\n    /* .catch((error) =>\n        \n      ); */\n  };\n}\n\nexport function getWeatherReport({ latitude, longitude }) {\n  console.log(\"latitude\", latitude);\n  let url = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=48e1d541b5f45f74de028c9c43d25296`;\n  return function (dispatch) {\n    dispatch({\n      type: geoLocationTypes.FETCH_WEATHER_PENDING,\n    });\n    Axios.get(url)\n      .then((response) =>\n        dispatch({\n          type: geoLocationTypes.FETCH_WEATHER_SUCCESS,\n          payload: response,\n        })\n      )\n      .catch((error) =>\n        dispatch({\n          type: geoLocationTypes.FETCH_WEATHER_FAILED,\n          payload: error,\n        })\n      );\n  };\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { requestNews } from \"./redux/news/actions\";\nimport { connect } from \"react-redux\";\nimport NewsList from \"./components/NewsList/NewsList\";\nimport Weather from \"./components/Weather/Weather\";\n\nfunction App({ requestNews, data }) {\n  useEffect(() => {\n    if (data !== null) {\n      requestNews(data.data.sys.country);\n      console.log(\"requesting news\");\n    }\n  }, [requestNews, data]);\n  return (\n    <div className=\"App\">\n      <Weather />\n      <NewsList />\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ weather: { data } }) => ({\n  data,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestNews: () => dispatch(requestNews()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { newsTypes } from \"./types\";\nimport Axios from \"axios\";\n\nexport const requestNews = (country = \"in\") => {\n  let url = `https://gnews.io/api/v3/search?q=${country}&country=${country}&token=db9f2b7ed1de35a753578fa3022c9a7b`;\n  return function (dispatch) {\n    dispatch({\n      type: newsTypes.FETCH_NEWS_PENDING,\n    });\n\n    Axios.get(url)\n      .then((response) =>\n        dispatch({\n          type: newsTypes.FETCH_NEWS_SUCCESS,\n          payload: response,\n        })\n      )\n\n      .catch((error) =>\n        dispatch({\n          type: newsTypes.FETCH_NEWS_FAILED,\n          payload: error,\n        })\n      );\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { newsTypes } from \"./types\";\n\nconst INITIAL_STATE = {\n  newsListData: null,\n  error: null,\n  pending: false,\n};\n\nexport function newsListReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case newsTypes.FETCH_NEWS_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case newsTypes.FETCH_NEWS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        newsListData: action.payload,\n      };\n\n    case newsTypes.FETCH_NEWS_FAILED:\n      return {\n        ...state,\n        pending: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { geoLocationTypes } from \"./types\";\n\nconst INITIAL_STATE = {\n  location: null,\n  error: false,\n  pending: true,\n};\n\nexport const geoLocationReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case geoLocationTypes.GET_GEO_LOCATION_SUCCESS:\n      return {\n        ...state,\n        location: action.payload,\n        pending: false,\n      };\n    case geoLocationTypes.GET_GEO_LOCATION_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case geoLocationTypes.GET_GEO_LOCATION_FAILED:\n      return {\n        ...state,\n        pending: false,\n        error: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst INITIAL_STATE_WEATHER = {\n  isPending: false,\n  data: null,\n  error: null,\n};\nexport const weatherReducer = (state = INITIAL_STATE_WEATHER, action) => {\n  switch (action.type) {\n    case geoLocationTypes.FETCH_WEATHER_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case geoLocationTypes.FETCH_WEATHER_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        isPending: false,\n      };\n    case geoLocationTypes.FETCH_WEATHER_FAILED:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { newsListReducer } from \"./redux/news/reducer\";\nimport {\n  geoLocationReducer,\n  weatherReducer,\n} from \"./redux/geoLocation/reducer\";\n\nexport const rootReducer = combineReducers({\n  newsList: newsListReducer,\n  geoLocation: geoLocationReducer,\n  weather: weatherReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"./root-reducer\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk];\nconst logger = createLogger();\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}